Day-1 Dependencies
-------------------------

<!-- Dependencies Required for creating Spring MVC and Spring Rest application -->

<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-web</artifactId>
</dependency>

<!-- Dependencies Required for auto restart of Server -->

<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-devtools</artifactId>
<scope>runtime</scope>
<optional>true</optional>
</dependency>



changing the server port
---------------------------

server.port=8082

Dependencies for JSP as view
-------------------------------
<dependency>
<groupId>org.apache.tomcat.embed</groupId>
<artifactId>tomcat-embed-jasper</artifactId>
</dependency>

<dependency>
<groupId>javax.servlet</groupId>
<artifactId>jstl</artifactId>
</dependency>


Register View Resolver
------------------------

@Configuration
public class BeanConfiguration {
@Bean
public InternalResourceViewResolver  setupResolver() {
InternalResourceViewResolver resolver=new InternalResourceViewResolver();
resolver.setPrefix("/WEB-INF/view/");
resolver.setSuffix(".jsp");
return resolver;
}
}


<!-- Required for XML Response -->

<dependency>
<groupId>com.fasterxml.jackson.dataformat</groupId>
<artifactId>jackson-dataformat-xml</artifactId>
</dependency>


Spring Boot Day-2 dependency and Configuration 
-------------------------------------------------

Spring Hibernate Integration 
------------------------------
Check avalibale databases
----------------------------
show databases;

drop database 
------------------
drop database mydb;

Create a new data base
------------------------
create database mydb;

Use created data base 
---------------------
use mydb;

Create the Table 
-----------------

create table UserInfo (uid int NOT NULL AUTO_INCREMENT, email varchar(20) NOT NULL , name varchar(20) NOT NULL , PRIMARY KEY (uid));


Display avalibale table inside database and its strcuture
------------------------------------------------------------
show  tables ;
desc UserInfo;

Insert Records
-----------------

insert into UserInfo values (101,'Adam@Gmail.com','Adam');
insert into UserInfo values (102,'Eve@Gmail.com','Eve');
insert into UserInfo values (103,'Jack@Gmail.com','Jack');
commit;


Display all records
------------------------
select * from UserInfo;


<!-- Spring Data JPA Starter -->
	
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-data-jpa</artifactId>
</dependency>



<!-- MySql  driver -->
<dependency>
<groupId>mysql</groupId>
<artifactId>mysql-connector-java</artifactId>
 <scope>runtime</scope>
</dependency>

<!-- H2  driver -->
<dependency>
<groupId>com.h2database</groupId>
<artifactId>h2</artifactId>
<scope>runtime</scope>
</dependency>




#  Configure the datasource conating database information

# MySql Configuration 

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
#spring.datasource.url = jdbc:mysql://localhost:3306/mydb?useSSL=false
#spring.datasource.username = root
#spring.datasource.password = mysql
#

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database

#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto = update


# H2 Configuration 
-------------------------
spring.h2.console.enabled=true
spring.h2.console.path=/h2

spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto = update




Spring Boot â€“ Deploy WAR file on Tomcat
-----------------------------------------

Update Packaging to WAR
-----------------------------

<packaging>war</packaging>

Inside pom.xml file  mark the embedded servlet container as provided 
--------------------------------------------------------------------
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-tomcat</artifactId>
<scope>provided</scope>
</dependency>

Modify the class annotated by @SpringBootApplication 
---------------------------------------------------------
@SpringBootApplication
public class SpringApplication extends SpringBootServletInitializer{
@Override
protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
return application.sources(SpringApplication.class);
}
}

Day-3 Dependency
-----------------------

<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
		 		
<dependency>
<groupId>org.springframework.boot</groupId>
<artifactId>spring-boot-starter-security</artifactId>
</dependency>
		
<dependency>
<groupId>org.springdoc</groupId>
<artifactId>springdoc-openapi-ui</artifactId>
<version>1.5.7</version>
</dependency>


#Actuator Configuration

management.endpoint.health.show-details=always

#info.name= Test Spring Service
#info.more.detail= This is a demo for Spring Actuator
#info.app.version=1.0.0
#Expose All Actuator Endpoints
#management.endpoints.web.exposure.include=*

#Execule expose of particular endpointd
#management.endpoints.web.exposure.exclude=env,beans

#Expose of particular endpointd
#management.trace.http.enabled: true
#management.endpoints.web.exposure.include=env,beans


Overrdie Security Configuration
-------------------------------------
import org.springframework.boot.actuate.autoconfigure.security.servlet.EndpointRequest;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
public class ActuatorSecurity extends WebSecurityConfigurerAdapter {
	
	@Override
protected void configure(HttpSecurity http)throws Exception{
http.requestMatcher(EndpointRequest.toAnyEndpoint()).authorizeRequests()
.anyRequest().hasRole("ADMIN").and().httpBasic();
}
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth)throws Exception{
	auth.inMemoryAuthentication().withUser("admin").password("{noop}admin")
	.authorities("ROLE_ADMIN");
	}
	
	}



#Swagger Configuration

---------------------------

springdoc.swagger-ui.path=/swagger-ui
springdoc.api-docs.path=/api-docs


Changing Default Information

@OpenAPIDefinition(info=@Info(title="User API",version="v1",contact=@Contact(name="Saurabh",email="admin@userapi.com")))

For Rest Controller

@Tag(name="MyUserController" ,description = "Controler for user API for User mangement")

@Operation(summary = "Add a new User",description = "Method to add a new user")


URI for OpenAPI

http://localhost:8082/v3/api-docs/

http://localhost:8082/v3/api-docs.yaml

http://localhost:8082/swagger-ui.html

http://localhost:8082/swagger-ui
		 
